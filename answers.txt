Jessica McIlree

1. What is faster to find an answer given the same graph, same start node, and same goal node: breadth-first search, depth-first search, or "it depends"? Explain why.
It depends, if the goal is closer to the starting point breadth-first search might find it first because it looks at all fo the neighbors from the start on, but if the goal is deeper in the grapth depth-first 
search might be faster as it would reach deeper points quicker by going in one direction from the start. referenced - https://cs.stackexchange.com/questions/298/graph-searching-breadth-first-vs-depth-first 

2. What is the worst case (Big-O) runtime of breadth-first search? Explain why.
O(V+E), searching the entire frontier requires following each edge which is O(E) and keeping a que of every vertice requres O(V), breadth first search needs to do both of these so its O(V+E).

3. Why would an adjacency matrix be less memory efficient than an adjacency list for storing a social graph of friends, like part of Facebook?
Adjacency lists are more memory efficient for large sparce graphs, like a list of friends would be, where every person(v) would have a list of their connections to friends(e)
as they have flexible growth while a matrix might have to re-allocate space to add more friends and hold  alot of filler space where there are no connections.

4. Give an example of depth-first search in the real world (not on a computer).
Roomba vacuum.
